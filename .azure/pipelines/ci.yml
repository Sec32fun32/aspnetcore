#
# See https://docs.microsoft.com/en-us/vsts/pipelines/yaml-schema for details on this file.
#

# Configure which branches trigger builds
trigger:
  batch: true
  branches:
    include:
    - main
    - release/*
    - internal/release/*

# Run PR validation on all branches
pr:
  autoCancel: true
  branches:
    include:
    - '*'

# Choose whether to skip tests when running pipeline manually.
parameters:
- name: skipTests
  default: false
  displayName: Skip tests?
  type: boolean

variables:
- name: DOTNET_SKIP_FIRST_TIME_EXPERIENCE
  value: true
- name: _TeamName
  value:  AspNetCore
- name: _DotNetPublishToBlobFeed
  value: true
- name: _PublishUsingPipelines
  value: true
- name: _DotNetArtifactsCategory
  value: .NETCORE
- name: _DotNetValidationArtifactsCategory
  value: .NETCORE
- name: PostBuildSign
  value: true
- ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
  - name: _BuildArgs
    value: /p:TeamName=$(_TeamName)
           /p:OfficialBuildId=$(Build.BuildNumber)
           /p:SkipTestBuild=true
           /p:PostBuildSign=$(PostBuildSign)
  # DotNet-Blob-Feed provides: dotnetfeed-storage-access-key-1
  # Publish-Build-Assets provides: MaestroAccessToken, BotAccount-dotnet-maestro-bot-PAT
  - group: DotNet-Blob-Feed
  - group: Publish-Build-Assets
  # The following extra properties are not set when testing. Use with final build.[cmd,sh] of asset-producing jobs.
  - name: _PublishArgs
    value: /p:Publish=true
           /p:GenerateChecksums=true
           /p:DotNetPublishBlobFeedKey=$(dotnetfeed-storage-access-key-1)
           /p:DotNetPublishBlobFeedUrl=https://dotnetfeed.blob.core.windows.net/dotnet-core/index.json
           /p:DotNetPublishToBlobFeed=$(_DotNetPublishToBlobFeed)
           /p:DotNetPublishUsingPipelines=$(_PublishUsingPipelines)
           /p:DotNetArtifactsCategory=$(_DotNetArtifactsCategory)
  # Do not log most Windows steps in official builds; this is the slowest job. Site extensions step always logs.
  - name: WindowsArm64LogArgs
    value: -ExcludeCIBinaryLog
  - name: Windows64LogArgs
    value: -ExcludeCIBinaryLog
  - name: Windows86LogArgs
    value: -ExcludeCIBinaryLog
  - name: WindowsSignLogArgs
    value: -ExcludeCIBinaryLog
  - name: WindowsInstallersLogArgs
    value: -ExcludeCIBinaryLog
  - name: WindowsArm64InstallersLogArgs
    value: -ExcludeCIBinaryLog
- ${{ if or(eq(variables['System.TeamProject'], 'public'), in(variables['Build.Reason'], 'PullRequest')) }}:
  - name: _BuildArgs
    value: '/p:SkipTestBuild=true /p:PostBuildSign=$(PostBuildSign)'
  - name: _PublishArgs
    value: ''
  # Write binary logs for all main Windows build steps except the x86 one in public and PR builds.
  - name: WindowsArm64LogArgs
    value: /bl:artifacts/log/Release/Build.arm64.binlog
  - name: Windows64LogArgs
    value: /bl:artifacts/log/Release/Build.x64.binlog
  - name: Windows86LogArgs
    value: -ExcludeCIBinaryLog
  - name: WindowsSignLogArgs
    value: /bl:artifacts/log/Release/Build.CodeSign.binlog
  - name: WindowsInstallersLogArgs
    value: /bl:artifacts/log/Release/Build.Installers.binlog
  - name: WindowsArm64InstallersLogArgs
    value: /bl:artifacts/log/Release/Build.Installers.Arm64.binlog
- ${{ if ne(variables['System.TeamProject'], 'internal') }}:
  - name: _UseHelixOpenQueues
    value: 'true'
  - name: _SignType
    value: ''
  - name: _InternalRuntimeDownloadArgs
    value: ''
  - name: _InternalRuntimeDownloadCodeSignArgs
    value: ''
- ${{ if eq(variables['System.TeamProject'], 'internal') }}:
  - group: DotNet-MSRC-Storage
  - name: _InternalRuntimeDownloadArgs
    value: -RuntimeSourceFeed https://dotnetclimsrc.blob.core.windows.net/dotnet
           -RuntimeSourceFeedKey $(dotnetclimsrc-read-sas-token-base64)
           /p:DotNetAssetRootAccessTokenSuffix='$(dotnetclimsrc-read-sas-token-base64)'
  # The code signing doesn't use the aspnet build scripts, so the msbuild parameters have to be passed directly. This
  # is awkward but necessary because the eng/common/ build scripts don't add the msbuild properties automatically.
  - name: _InternalRuntimeDownloadCodeSignArgs
    value: $(_InternalRuntimeDownloadArgs)
           /p:DotNetRuntimeSourceFeed=https://dotnetclimsrc.blob.core.windows.net/dotnet
           /p:DotNetRuntimeSourceFeedKey=$(dotnetclimsrc-read-sas-token-base64)
  - group: DotNet-HelixApi-Access
  - name: _UseHelixOpenQueues
    value: 'false'
  - ${{ if notin(variables['Build.Reason'], 'PullRequest') }}:
    - name: _SignType
      value: real
  - ${{ if in(variables['Build.Reason'], 'PullRequest') }}:
    - name: _SignType
      value: test

stages:
- stage: build
  displayName: Build
  jobs:
  # Code check
  - ${{ if or(eq(variables['System.TeamProject'], 'public'), in(variables['Build.Reason'], 'PullRequest'), in(variables['Build.Reason'], 'Manual')) }}:
    - template: jobs/default-build.yml
      parameters:
        jobName: Code_check
        jobDisplayName: Code check
        agentOs: Windows
        steps:
        - powershell: ./eng/scripts/CodeCheck.ps1 -ci $(_InternalRuntimeDownloadArgs)
          displayName: Run eng/scripts/CodeCheck.ps1
        artifacts:
        - name: Code_Check_Logs
          path: artifacts/log/
          publishOnError: true
          includeForks: true

  # Build MacOS x64
  - template: jobs/default-build.yml
    parameters:
      jobName: MacOs_x64_build
      jobDisplayName: "Build: macOS x64"
      agentOs: macOs
      buildArgs:
        --pack
        --all
        --no-build-nodejs
        --no-build-java
        -p:OnlyPackPlatformSpecificPackages=true
        -p:AssetManifestFileName=aspnetcore-MacOS_x64.xml
        $(_BuildArgs)
        $(_PublishArgs)
        $(_InternalRuntimeDownloadArgs)
      installNodeJs: false
      installJdk: false
      artifacts:
      - name: MacOS_x64_Logs
        path: artifacts/log/
        publishOnError: true
        includeForks: true
      - name: MacOS_x64_Packages
        path: artifacts/packages/

  # Build Linux x64
  - template: jobs/default-build.yml
    parameters:
      jobName: Linux_x64_build
      jobDisplayName: "Build: Linux x64"
      agentOs: Linux
      useHostedUbuntu: false
      steps:
      - script: ./eng/build.sh
            --ci
            --arch x64
            --pack
            --all
            --no-build-nodejs
            --no-build-java
            -p:OnlyPackPlatformSpecificPackages=true
            -p:AssetManifestFileName=aspnetcore-Linux_x64.xml
            $(_BuildArgs)
            $(_InternalRuntimeDownloadArgs)
        displayName: Run build.sh
      - script: |
          git clean -xfd src/**/obj/
          ./dockerbuild.sh bionic \
            --ci \
            --nobl \
            --arch x64 \
            --build-installers \
            --no-build-deps \
            --no-build-nodejs \
            -p:OnlyPackPlatformSpecificPackages=true \
            -p:BuildRuntimeArchive=false \
            -p:LinuxInstallerType=deb \
            $(_BuildArgs) \
            $(_InternalRuntimeDownloadArgs)
        displayName: Build Debian installers
      - script: |
          git clean -xfd src/**/obj/
          ./dockerbuild.sh rhel \
            --ci \
            --nobl \
            --arch x64 \
            --build-installers \
            --no-build-deps \
            --no-build-nodejs \
            -p:OnlyPackPlatformSpecificPackages=true \
            -p:BuildRuntimeArchive=false \
            -p:LinuxInstallerType=rpm \
            -p:AssetManifestFileName=aspnetcore-Linux_x64.xml \
            $(_BuildArgs) \
            $(_PublishArgs) \
            $(_InternalRuntimeDownloadArgs)
        displayName: Build RPM installers
      installNodeJs: false
      installJdk: false
      artifacts:
      - name: Linux_x64_Logs
        path: artifacts/log/
        publishOnError: true
        includeForks: true
      - name: Linux_x64_Packages
        path: artifacts/packages/

  # Build Linux ARM
  - template: jobs/default-build.yml
    parameters:
      jobName: Linux_arm_build
      jobDisplayName: "Build: Linux ARM"
      agentOs: Linux
      buildArgs:
        --arch arm
        --pack
        --all
        --no-build-nodejs
        --no-build-java
        -p:OnlyPackPlatformSpecificPackages=true
        -p:AssetManifestFileName=aspnetcore-Linux_arm.xml
        $(_BuildArgs)
        $(_PublishArgs)
        $(_InternalRuntimeDownloadArgs)
      installNodeJs: false
      installJdk: false
      artifacts:
      - name: Linux_arm_Logs
        path: artifacts/log/
        publishOnError: true
        includeForks: true
      - name: Linux_arm_Packages
        path: artifacts/packages/

  # Build Linux Musl x64
  - template: jobs/default-build.yml
    parameters:
      jobName: Linux_musl_x64_build
      jobDisplayName: "Build: Linux Musl x64"
      agentOs: Linux
      container: mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.14-WithNode-20210910135833-c401c85
      buildArgs:
        --arch x64
        --os-name linux-musl
        --pack
        --all
        --no-build-nodejs
        --no-build-java
        -p:OnlyPackPlatformSpecificPackages=true
        -p:AssetManifestFileName=aspnetcore-Linux_musl_x64.xml
        $(_BuildArgs)
        $(_PublishArgs)
        $(_InternalRuntimeDownloadArgs)
      installNodeJs: false
      installJdk: false
      skipComponentGovernanceDetection: true
      artifacts:
      - name: Linux_musl_x64_Logs
        path: artifacts/log/
        publishOnError: true
        includeForks: true
      - name: Linux_musl_x64_Packages
        path: artifacts/packages/

  # Build Linux Musl ARM
  - template: jobs/default-build.yml
    parameters:
      jobName: Linux_musl_arm_build
      jobDisplayName: "Build: Linux Musl ARM"
      agentOs: Linux
      useHostedUbuntu: false
      container: mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-cross-arm-alpine-20210409142425-044d5b9
      buildArgs:
        --arch arm
        --os-name linux-musl
        --pack
        --all
        --no-build-nodejs
        --no-build-java
        -p:OnlyPackPlatformSpecificPackages=true
        -p:AssetManifestFileName=aspnetcore-Linux_musl_arm.xml
        $(_BuildArgs)
        $(_PublishArgs)
        $(_InternalRuntimeDownloadArgs)
      installNodeJs: false
      installJdk: false
      artifacts:
      - name: Linux_musl_arm_Logs
        path: artifacts/log/
        publishOnError: true
        includeForks: true
      - name: Linux_musl_arm_Packages
        path: artifacts/packages/

  # Build Linux Musl ARM64
  - template: jobs/default-build.yml
    parameters:
      jobName: Linux_musl_arm64_build
      jobDisplayName: "Build: Linux Musl ARM64"
      agentOs: Linux
      useHostedUbuntu: false
      container: mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-cross-arm64-alpine-20210409142425-b2c2436
      buildArgs:
        --arch arm64
        --os-name linux-musl
        --pack
        --all
        --no-build-nodejs
        --no-build-java
        -p:OnlyPackPlatformSpecificPackages=true
        -p:AssetManifestFileName=aspnetcore-Linux_musl_arm64.xml
        $(_BuildArgs)
        $(_PublishArgs)
        $(_InternalRuntimeDownloadArgs)
      installNodeJs: false
      installJdk: false
      artifacts:
      - name: Linux_musl_arm64_Logs
        path: artifacts/log/
        publishOnError: true
        includeForks: true
      - name: Linux_musl_arm64_Packages
        path: artifacts/packages/

  - ${{ if and(ne(parameters.skipTests, 'true'), or(eq(variables['System.TeamProject'], 'public'), in(variables['Build.Reason'], 'PullRequest'), in(variables['Build.Reason'], 'Manual'))) }}:
    # Test jobs
    - template: jobs/default-build.yml
      parameters:
        jobName: Windows_Test
        jobDisplayName: "Test: Windows Server 2016 x64"
        agentOs: Windows
        isTestingJob: true
        # Just uploading artifacts/logs/ files can take 15 minutes. Doubling the cancel timeout for this job.
        cancelTimeoutInMinutes: 30
        buildArgs: -all -pack -test /p:SkipHelixReadyTests=true /p:SkipIISNewHandlerTests=true /p:SkipIISTests=true
                   /p:SkipIISExpressTests=true /p:SkipIISNewShimTests=true /p:RunTemplateTests=false
                   /p:SkipComponentsE2ETests=true
                   $(_InternalRuntimeDownloadArgs)
        beforeBuild:
        - powershell: "& ./src/Servers/IIS/tools/UpdateIISExpressCertificate.ps1; & ./src/Servers/IIS/tools/update_schema.ps1"
          displayName: Setup IISExpress test certificates and schema
        artifacts:
        - name: Windows_Test_Logs
          path: artifacts/log/
          publishOnError: true
          includeForks: true
        - name: Windows_Test_Results
          path: artifacts/TestResults/
          publishOnError: true
          includeForks: true
