# Configure which branches trigger builds
trigger:
  batch: true
  branches:
    include:
    - release/2.*
    - internal/release/2.*

# Run PR validation on all branches
pr:
  branches:
    include:
    - '*'

variables:
- name: ASPNETCORE_TEST_LOG_MAXPATH
  value: "200" # Keep test log file name length low enough for artifact zipping
- name: DOTNET_HOME
  value: $(Agent.BuildDirectory)/.dotnet
- name: TeamName
  value: AspNetCore
- ${{ if eq(variables['System.TeamProject'], 'public') }}:
  - name: BuildNumberArg
    value: ''
- ${{ if ne(variables['System.TeamProject'], 'public') }}:
  - name: BuildNumberArg
    value: '/p:BuildNumber=$(Build.BuildId)'
  - name: SharedFxArgs
    value: '/t:Prepare
            /t:Restore
            /t:GeneratePropsFiles
            /t:BuildSharedFx
            $(BuildNumberArg)'

jobs:
- template: jobs/default-build.yml
  parameters:
    jobName: Windows_Build
    jobDisplayName: "Build and test: Windows"
    agentOs: Windows
    buildArgs: $(BuildNumberArg)
    codeSign: true
    beforeBuild:
    - powershell: "& ./src/Servers/IIS/tools/UpdateIISExpressCertificate.ps1"
      displayName: Setup IISExpress test certificates
    # Skip tests by default in internal non-PR builds.
    #${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
      #variables:
      #  PB_SKIPTESTS: ${{ coalesce(variables.PB_SKIPTESTS, 'true') }}
# Unix test jobs only run on public CI builds and PRs
- ${{ if or(eq(variables['System.TeamProject'], 'public'), in(variables['Build.Reason'], 'PullRequest')) }}:
  - template: jobs/default-build.yml
    parameters:
      jobName: MacOs_Build
      jobDisplayName: "Build and test : MacOS"
      agentOs: MacOS
      buildArgs: $(BuildNumberArg)
  - template: jobs/default-build.yml
    parameters:
      jobName: Linux_Build
      jobDisplayName: "Build and test : Linux"
      agentOs: Linux
      buildArgs: $(BuildNumberArg)

- ${{ if eq(variables['System.TeamProject'], 'internal') }}:
  - job: Windows_SharedFx
    displayName: Build Windows x64/x86 SharedFx
    dependsOn: Windows_Build
    timeoutInMinutes: 90
    workspace:
      clean: all
    pool:
      name: NetCoreInternal-Pool
      queue: BuildPool.Server.Amd64.VS2017
    variables:
      _SignType: real
      JAVA_HOME: $(Agent.BuildDirectory)\.tools\jdk
      PB_SKIPTESTS: 'true'
    steps:
    - checkout: self
      clean: true
    - task: NodeTool@0
      displayName: Install Node 10.x
      inputs:
        versionSpec: 10.x
    - powershell: ./eng/scripts/InstallJdk.ps1 '11.0.1'
      displayName: Install JDK 11
    - task: NuGetCommand@2
      displayName: 'Clear NuGet caches'
      condition: succeeded()
      inputs:
        command: custom
        arguments: 'locals all -clear'
    - task: MicroBuildSigningPlugin@2
      displayName: Install MicroBuild Signing plugin
      inputs:
        signType: $(_SignType)
        zipSources: false
        feedSource: https://dnceng.pkgs.visualstudio.com/_packaging/MicroBuildToolset/nuget/v3/index.json
    - task: DownloadBuildArtifacts@0
      displayName: Download artifacts
      inputs:
        artifactName: artifacts-Windows-Release
        downloadPath: $(Build.StagingDirectory)/downloaded_artifacts/
    - task: CopyFiles@2
      displayName: Copy artifacts to .deps/
      inputs:
        sourceFolder: $(Build.StagingDirectory)/downloaded_artifacts/artifacts-Windows-Release/
        contents: '**'
        targetFolder: $(Build.SourcesDirectory)/.deps/
    - script: .\build.cmd
              -ci
              /p:SignType=$(_SignType)
              $(SharedFxArgs)
              /p:SharedFxRID=win-x64
              /bl:artifacts/logs/SharedFx-win-x64.binlog
      env:
        PB_PACKAGEVERSIONPROPSURL: $(PB_PackageVersionPropsUrl)
        PB_ASSETROOTURL: $(PB_AssetRootUrl)
        PB_RESTORESOURCE: $(PB_RestoreSource)
        PB_PUBLISHBLOBFEEDKEY: $(PB_PublishBlobFeedKey)
      displayName: Build win-x64 SharedFX
    - powershell: eng\scripts\KillProcesses.ps1
      displayName: Kill processes
      condition: always()
    - script: .\build.cmd
              -ci
              /p:SignType=$(_SignType)
              $(SharedFxArgs)
              /p:SharedFxRID=win-x86
              /bl:artifacts/logs/SharedFx-win-x86.binlog
      env:
        PB_PACKAGEVERSIONPROPSURL: $(PB_PackageVersionPropsUrl)
        PB_ASSETROOTURL: $(PB_AssetRootUrl)
        PB_RESTORESOURCE: $(PB_RestoreSource)
        PB_PUBLISHBLOBFEEDKEY: $(PB_PublishBlobFeedKey)
      displayName: Build win-x86 SharedFX
    - powershell: eng\scripts\KillProcesses.ps1
      displayName: Kill processes
      condition: always()
    - script: .\build.cmd
              -ci
              /p:SignType=$(_SignType)
              $(BuildNumberArg)
              /p:SkipArtifactInfoTargets=true
              /p:DisableSignCheck=true
              /t:DoCodeSigning
              /bl:artifacts/logs/CodeSign.binlog
      env:
        PB_PACKAGEVERSIONPROPSURL: $(PB_PackageVersionPropsUrl)
        PB_ASSETROOTURL: $(PB_AssetRootUrl)
        PB_RESTORESOURCE: $(PB_RestoreSource)
        PB_PUBLISHBLOBFEEDKEY: $(PB_PublishBlobFeedKey)
      displayName: Code Sign
    - powershell: eng\scripts\KillProcesses.ps1
      displayName: Kill processes
      condition: always()
    - task: PublishTestResults@2
      displayName: Publish test results
      condition: always()
      continueOnError: true
      inputs:
        testRunTitle: Windows-SharedFx-UnitTests
        testRunner: vstest
        testResultsFiles: 'artifacts/logs/**/*.trx'
        mergeTestResults: false
    - task: PublishBuildArtifacts@1
      displayName: Upload artifacts
      condition: eq(variables['system.pullrequest.isfork'], false)
      continueOnError: true
      inputs:
        pathtoPublish: artifacts/
        artifactName: artifacts-Windows-SharedFx
        artifactType: Container
        parallel: true
    - task: PublishBuildArtifacts@1
      displayName: Upload dependencies.g.props
      condition: eq(variables['system.pullrequest.isfork'], false)
      continueOnError: true
      inputs:
        pathtoPublish: .deps/dependencies.g.props
        artifactName: artifacts-dependencies-props
        artifactType: Container
        parallel: true
    - task: MicroBuildCleanup@1
      displayName: Cleanup MicroBuild tasks
      condition: always()

  - job: MacOs_SharedFx
    displayName: Build Osx-x64 SharedFx
    dependsOn: Windows_Build
    timeoutInMinutes: 90
    workspace:
      clean: all
    pool:
      vmImage: macOS-10.14
    variables:
      PB_SKIPTESTS: 'true'
    steps:
    - checkout: self
      clean: true
    - task: NodeTool@0
      displayName: Install Node 10.x
      inputs:
        versionSpec: 10.x
    - task: DownloadBuildArtifacts@0
      displayName: Download artifacts
      inputs:
        artifactName: artifacts-Windows-Release
        downloadPath: $(Build.StagingDirectory)/downloaded_artifacts/
    - task: CopyFiles@2
      displayName: Copy artifacts to .deps/
      inputs:
        sourceFolder: $(Build.StagingDirectory)/downloaded_artifacts/artifacts-Windows-Release/
        contents: '**'
        targetFolder: $(Build.SourcesDirectory)/.deps/
    - script: ./$(BuildDirectory)/build.sh
              -ci
              $(SharedFxArgs)
              /p:SharedFxRID=osx-x64
              /bl:artifacts/logs/SharedFx-osx-x64.binlog
      env:
        PB_PACKAGEVERSIONPROPSURL: $(PB_PackageVersionPropsUrl)
        PB_ASSETROOTURL: $(PB_AssetRootUrl)
        PB_RESTORESOURCE: $(PB_RestoreSource)
        PB_PUBLISHBLOBFEEDKEY: $(PB_PublishBlobFeedKey)
      displayName: Build osx-x64 SharedFX
    - task: PublishTestResults@2
      displayName: Publish test results
      condition: always()
      continueOnError: true
      inputs:
        testRunTitle: MacOs-SharedFx-UnitTests
        testRunner: vstest
        testResultsFiles: 'artifacts/logs/**/*.trx'
        mergeTestResults: false
    - task: PublishBuildArtifacts@1
      displayName: Upload artifacts
      condition: eq(variables['system.pullrequest.isfork'], false)
      continueOnError: true
      inputs:
        pathtoPublish: artifacts/
        artifactName: artifacts-MacOs-SharedFx
        artifactType: Container
        parallel: true

  - job: Linux_SharedFx
    displayName: Build Linux x64/arm SharedFx
    dependsOn: Windows_Build
    timeoutInMinutes: 90
    workspace:
      clean: all
    pool:
      vmImage: ubuntu-18.04
    variables:
      LC_ALL: 'en_US.UTF-8'
      LANG: 'en_US.UTF-8'
      LANGUAGE: 'en_US.UTF-8'
      PB_SKIPTESTS: 'true'
    steps:
    - checkout: self
      clean: true
    - task: NodeTool@0
      displayName: Install Node 10.x
      inputs:
        versionSpec: 10.x
    - task: DownloadBuildArtifacts@0
      displayName: Download artifacts
      inputs:
        artifactName: artifacts-Windows-Release
        downloadPath: $(Build.StagingDirectory)/downloaded_artifacts/
    - task: CopyFiles@2
      displayName: Copy artifacts to .deps/
      inputs:
        sourceFolder: $(Build.StagingDirectory)/downloaded_artifacts/artifacts-Windows-Release/
        contents: '**'
        targetFolder: $(Build.SourcesDirectory)/.deps/
    - script: ./$(BuildDirectory)/build.sh
              -ci
              $(SharedFxArgs)
              /p:SharedFXRid=linux-x64
              /bl:artifacts/logs/SharedFx-linux-x64.binlog
      env:
        PB_PACKAGEVERSIONPROPSURL: $(PB_PackageVersionPropsUrl)
        PB_ASSETROOTURL: $(PB_AssetRootUrl)
        PB_RESTORESOURCE: $(PB_RestoreSource)
        PB_PUBLISHBLOBFEEDKEY: $(PB_PublishBlobFeedKey)
      displayName: Build linux-x64 SharedFX
    - script: ./$(BuildDirectory)/build.sh
              -ci
              $(SharedFxArgs)
              /p:SharedFXRid=linux-arm
              /p:IsLinuxArmSupported=true
              /bl:artifacts/logs/SharedFx-linux-arm.binlog
      env:
        PB_PACKAGEVERSIONPROPSURL: $(PB_PackageVersionPropsUrl)
        PB_ASSETROOTURL: $(PB_AssetRootUrl)
        PB_RESTORESOURCE: $(PB_RestoreSource)
        PB_PUBLISHBLOBFEEDKEY: $(PB_PublishBlobFeedKey)
      displayName: Build linux-arm SharedFX
    - task: PublishTestResults@2
      displayName: Publish test results
      condition: always()
      continueOnError: true
      inputs:
        testRunTitle: Linux-SharedFx-UnitTests
        testRunner: vstest
        testResultsFiles: 'artifacts/logs/**/*.trx'
        mergeTestResults: false
    - task: PublishBuildArtifacts@1
      displayName: Upload artifacts
      condition: eq(variables['system.pullrequest.isfork'], false)
      continueOnError: true
      inputs:
        pathtoPublish: artifacts/
        artifactName: artifacts-Linux-SharedFx
        artifactType: Container
        parallel: true

  - job: Linux_Musl_SharedFx
    displayName: Build Linux-musl-x64 SharedFx
    dependsOn: Windows_Build
    timeoutInMinutes: 90
    workspace:
      clean: all
    pool:
      vmImage: ubuntu-18.04
    variables:
      LC_ALL: 'en_US.UTF-8'
      LANG: 'en_US.UTF-8'
      LANGUAGE: 'en_US.UTF-8'
      PB_SKIPTESTS: 'true'
    steps:
    - checkout: self
      clean: true
    - task: NodeTool@0
      displayName: Install Node 10.x
      inputs:
        versionSpec: 10.x
    - task: DownloadBuildArtifacts@0
      displayName: Download artifacts
      inputs:
        artifactName: artifacts-Windows-Release
        downloadPath: $(Build.StagingDirectory)/downloaded_artifacts/
    - task: CopyFiles@2
      displayName: Copy artifacts to .deps/
      inputs:
        sourceFolder: $(Build.StagingDirectory)/downloaded_artifacts/artifacts-Windows-Release/
        contents: '**'
        targetFolder: $(Build.SourcesDirectory)/.deps/
    - script: ./$(BuildDirectory)/dockerbuild.sh
              alpine
              -ci
              $(SharedFxArgs)
              /p:SkipNpm=true
              /p:SharedFXRid=linux-musl-x64
              /bl:artifacts/logs/SharedFx-linux-musl-x64.binlog
      env:
        PB_PACKAGEVERSIONPROPSURL: $(PB_PackageVersionPropsUrl)
        PB_ASSETROOTURL: $(PB_AssetRootUrl)
        PB_RESTORESOURCE: $(PB_RestoreSource)
        PB_PUBLISHBLOBFEEDKEY: $(PB_PublishBlobFeedKey)
      displayName: Build linux-musl-x64 SharedFX
    - task: PublishTestResults@2
      displayName: Publish test results
      condition: always()
      continueOnError: true
      inputs:
        testRunTitle: Linux-Musl-SharedFx-UnitTests
        testRunner: vstest
        testResultsFiles: 'artifacts/logs/**/*.trx'
        mergeTestResults: false
    - task: PublishBuildArtifacts@1
      displayName: Upload artifacts
      condition: eq(variables['system.pullrequest.isfork'], false)
      continueOnError: true
      inputs:
        pathtoPublish: artifacts/
        artifactName: artifacts-Linux-Musl-SharedFx
        artifactType: Container
        parallel: true
    - bash: docker system prune -af
      displayName: Docker prune
      condition: always()
      continueOnError: true

  - job: Windows_Installers
    displayName: Build Windows Installers
    dependsOn: Windows_SharedFx
    timeoutInMinutes: 90
    workspace:
      clean: all
    pool:
      name: NetCoreInternal-Pool
      queue: BuildPool.Server.Amd64.VS2017
    variables:
      _SignType: real
      JAVA_HOME: $(Agent.BuildDirectory)\.tools\jdk
      PB_SKIPTESTS: 'true'
    steps:
    - checkout: self
      clean: true
    - task: NuGetCommand@2
      displayName: 'Clear NuGet caches'
      condition: succeeded()
      inputs:
        command: custom
        arguments: 'locals all -clear'
    - task: MicroBuildSigningPlugin@2
      displayName: Install MicroBuild Signing plugin
      inputs:
        signType: $(_SignType)
        zipSources: false
        feedSource: https://dnceng.pkgs.visualstudio.com/_packaging/MicroBuildToolset/nuget/v3/index.json
    - task: DownloadBuildArtifacts@0
      displayName: Download artifacts
      inputs:
        artifactName: artifacts-Windows-SharedFx
        downloadPath: $(Build.StagingDirectory)/downloaded_artifacts/
    - task: DownloadBuildArtifacts@0
      displayName: Download dependencies.g.props
      inputs:
        artifactName: artifacts-dependencies-props
        downloadPath: $(Build.StagingDirectory)/downloaded_artifacts/
    - task: CopyFiles@2
      displayName: Copy SharedFx artifacts to .deps/
      inputs:
        sourceFolder: $(Build.StagingDirectory)/downloaded_artifacts/artifacts-Windows-SharedFx/Signed/SharedFX/
        contents: '**'
        targetFolder: $(Build.SourcesDirectory)/.deps/fx/
    - task: CopyFiles@2
      displayName: Copy SharedFx artifacts to .deps/
      inputs:
        sourceFolder: $(Build.StagingDirectory)/downloaded_artifacts/artifacts-Windows-SharedFx/Signed/packages/
        contents: 'Microsoft.AspNetCore.AspNetCoreModule*.nupkg'
        targetFolder: $(Build.SourcesDirectory)/.deps/ANCM/
    - task: CopyFiles@2
      displayName: Copy dependencies.g.props to .deps/
      inputs:
        sourceFolder: $(Build.StagingDirectory)/downloaded_artifacts/artifacts-dependencies-props/
        contents: 'dependencies.g.props'
        targetFolder: $(Build.SourcesDirectory)/.deps/
    - powershell: src/Installers/Windows/build.ps1
        -Config Release
        -BuildNumber $(Build.BuildId)
      env:
        PB_PACKAGEVERSIONPROPSURL: $(PB_PackageVersionPropsUrl)
        PB_ASSETROOTURL: $(PB_AssetRootUrl)
        PB_RESTORESOURCE: $(PB_RestoreSource)
        PB_PUBLISHBLOBFEEDKEY: $(PB_PublishBlobFeedKey)
      displayName: Run src/Installers/Windows/build.ps1
    - powershell: eng\scripts\KillProcesses.ps1
      displayName: Kill processes
      condition: always()
    - task: PublishBuildArtifacts@1
      displayName: Upload artifacts
      condition: eq(variables['system.pullrequest.isfork'], false)
      continueOnError: true
      inputs:
        pathtoPublish: artifacts/
        artifactName: artifacts-Windows-Installers
        artifactType: Container
        parallel: true
    - task: MicroBuildCleanup@1
      displayName: Cleanup MicroBuild tasks
      condition: always()

  - job: Package_Archive
    displayName: Build Package Archive
    dependsOn: Windows_SharedFx
    timeoutInMinutes: 90
    workspace:
      clean: all
    pool:
      name: NetCoreInternal-Pool
      queue: BuildPool.Server.Amd64.VS2017
    variables:
      _SignType: real
      JAVA_HOME: $(Agent.BuildDirectory)\.tools\jdk
      PB_SKIPTESTS: 'true'
    steps:
    - checkout: self
      clean: true
    - task: NuGetCommand@2
      displayName: 'Clear NuGet caches'
      condition: succeeded()
      inputs:
        command: custom
        arguments: 'locals all -clear'
    - task: DownloadBuildArtifacts@0
      displayName: Download artifacts
      inputs:
        artifactName: artifacts-Windows-SharedFx
        downloadPath: $(Build.StagingDirectory)/downloaded_artifacts/
    - task: CopyFiles@2
      displayName: Copy artifacts to .deps/
      inputs:
        sourceFolder: $(Build.StagingDirectory)/downloaded_artifacts/artifacts-Windows-SharedFx/Signed/
        contents: '**'
        targetFolder: $(Build.SourcesDirectory)/.deps/Signed/
    - script: .\build.cmd
              -ci
              $(BuildNumberArg)
              /p:SignType=$(_SignType)
              /t:BuildFallbackArchive
              /bl:artifacts/logs/PackageArchive.binlog
      env:
        PB_PACKAGEVERSIONPROPSURL: $(PB_PackageVersionPropsUrl)
        PB_ASSETROOTURL: $(PB_AssetRootUrl)
        PB_RESTORESOURCE: $(PB_RestoreSource)
        PB_PUBLISHBLOBFEEDKEY: $(PB_PublishBlobFeedKey)
      displayName: Build Package Archive
    - powershell: eng\scripts\KillProcesses.ps1
      displayName: Kill processes
      condition: always()
    - task: PublishBuildArtifacts@1
      displayName: Upload artifacts
      condition: eq(variables['system.pullrequest.isfork'], false)
      continueOnError: true
      inputs:
        pathtoPublish: artifacts/
        artifactName: artifacts-Package-Archive
        artifactType: Container
        parallel: true

  - job: SharedFX_Installers
    displayName: Build SharedFX Installers
    dependsOn:
      - Linux_SharedFx
      - Linux_Musl_SharedFx
      - MacOs_SharedFx
      - Windows_SharedFx
    timeoutInMinutes: 90
    workspace:
      clean: all
    pool:
      vmImage: ubuntu-18.04
    variables:
      LC_ALL: 'en_US.UTF-8'
      LANG: 'en_US.UTF-8'
      LANGUAGE: 'en_US.UTF-8'
      PB_SKIPTESTS: 'true'
    steps:
    - checkout: self
      clean: true
    - task: NodeTool@0
      displayName: Install Node 10.x
      inputs:
        versionSpec: 10.x
    - task: DownloadBuildArtifacts@0
      displayName: Download Linux SharedFx artifacts
      inputs:
        artifactName: artifacts-Linux-SharedFx
        downloadPath: $(Build.StagingDirectory)/downloaded_artifacts/
    - task: DownloadBuildArtifacts@0
      displayName: Download Linux Musl SharedFx artifacts
      inputs:
        artifactName: artifacts-Linux-Musl-SharedFx
        downloadPath: $(Build.StagingDirectory)/downloaded_artifacts/
    - task: DownloadBuildArtifacts@0
      displayName: Download MacOs SharedFx artifacts
      inputs:
        artifactName: artifacts-MacOs-SharedFx
        downloadPath: $(Build.StagingDirectory)/downloaded_artifacts/
    - task: DownloadBuildArtifacts@0
      displayName: Download Windows SharedFx artifacts
      inputs:
        artifactName: artifacts-Windows-SharedFx
        downloadPath: $(Build.StagingDirectory)/downloaded_artifacts/
    - task: CopyFiles@2
      displayName: Copy Linux artifacts to .deps/
      inputs:
        sourceFolder: $(Build.StagingDirectory)/downloaded_artifacts/artifacts-Linux-SharedFx/runtime/
        contents: '**'
        targetFolder: $(Build.SourcesDirectory)/.deps/Signed/SharedFx/
    - task: CopyFiles@2
      displayName: Copy Linux-Musl artifacts to .deps/
      inputs:
        sourceFolder: $(Build.StagingDirectory)/downloaded_artifacts/artifacts-Linux-Musl-SharedFx/runtime/
        contents: '**'
        targetFolder: $(Build.SourcesDirectory)/.deps/Signed/SharedFx/
    - task: CopyFiles@2
      displayName: Copy MacOS artifacts to .deps/
      inputs:
        sourceFolder: $(Build.StagingDirectory)/downloaded_artifacts/artifacts-MacOs-SharedFx/runtime/
        contents: '**'
        targetFolder: $(Build.SourcesDirectory)/.deps/Signed/SharedFx/
    - task: CopyFiles@2
      displayName: Copy Windows SharedFx artifacts to .deps/
      inputs:
        sourceFolder: $(Build.StagingDirectory)/downloaded_artifacts/artifacts-Windows-SharedFx/Signed/
        contents: '**'
        targetFolder: $(Build.SourcesDirectory)/.deps/Signed/
    - script: ./$(BuildDirectory)/build.sh
              -ci
              $(BuildNumberArg)
              /t:BuildInstallers
              /bl:artifacts/logs/SharedFx-Installers.binlog
      env:
        PB_PACKAGEVERSIONPROPSURL: $(PB_PackageVersionPropsUrl)
        PB_ASSETROOTURL: $(PB_AssetRootUrl)
        PB_RESTORESOURCE: $(PB_RestoreSource)
        PB_PUBLISHBLOBFEEDKEY: $(PB_PublishBlobFeedKey)
      displayName: Build SharedFX Installers
    - task: PublishBuildArtifacts@1
      displayName: Upload artifacts
      condition: eq(variables['system.pullrequest.isfork'], false)
      continueOnError: true
      inputs:
        pathtoPublish: artifacts/
        artifactName: artifacts-SharedFx-Installers
        artifactType: Container
        parallel: true
    - bash: docker system prune -af
      displayName: Docker prune
      condition: always()
      continueOnError: true

  - job: Publish
    displayName: Publish
    dependsOn:
      - Windows_Installers
      - SharedFX_Installers
      - Package_Archive
    timeoutInMinutes: 90
    workspace:
      clean: all
    pool:
      name: NetCoreInternal-Pool
      queue: BuildPool.Server.Amd64.VS2017
    variables:
      _SignType: real
      JAVA_HOME: $(Agent.BuildDirectory)\.tools\jdk
      PB_SKIPTESTS: 'true'
    steps:
    - checkout: self
      clean: true
    - task: NuGetCommand@2
      displayName: 'Clear NuGet caches'
      condition: succeeded()
      inputs:
        command: custom
        arguments: 'locals all -clear'
    - task: DownloadBuildArtifacts@0
      displayName: Download Windows artifacts
      inputs:
        artifactName: artifacts-Windows-Release
        downloadPath: $(Build.StagingDirectory)/downloaded_artifacts/
    - task: DownloadBuildArtifacts@0
      displayName: Download Linux SharedFx artifacts
      inputs:
        artifactName: artifacts-Linux-SharedFx
        downloadPath: $(Build.StagingDirectory)/downloaded_artifacts/
    - task: DownloadBuildArtifacts@0
      displayName: Download Linux Musl SharedFx artifacts
      inputs:
        artifactName: artifacts-Linux-Musl-SharedFx
        downloadPath: $(Build.StagingDirectory)/downloaded_artifacts/
    - task: DownloadBuildArtifacts@0
      displayName: Download MacOs SharedFx artifacts
      inputs:
        artifactName: artifacts-MacOs-SharedFx
        downloadPath: $(Build.StagingDirectory)/downloaded_artifacts/
    - task: DownloadBuildArtifacts@0
      displayName: Download Windows SharedFx artifacts
      inputs:
        artifactName: artifacts-Windows-SharedFx
        downloadPath: $(Build.StagingDirectory)/downloaded_artifacts/
    - task: DownloadBuildArtifacts@0
      displayName: Download Package Archive artifacts
      inputs:
        artifactName: artifacts-Package-Archive
        downloadPath: $(Build.StagingDirectory)/downloaded_artifacts/
    - task: DownloadBuildArtifacts@0
      displayName: Download SharedFx installer artifacts
      inputs:
        artifactName: artifacts-SharedFx-Installers
        downloadPath: $(Build.StagingDirectory)/downloaded_artifacts/
    - task: DownloadBuildArtifacts@0
      displayName: Download Windows installer artifacts
      inputs:
        artifactName: artifacts-Windows-Installers
        downloadPath: $(Build.StagingDirectory)/downloaded_artifacts/
    - task: CopyFiles@2
      displayName: Copy Windows artifacts to .deps/assets
      inputs:
        sourceFolder: $(Build.StagingDirectory)/downloaded_artifacts/artifacts-Windows-Release/build/
        contents: '**/*.tgz'
        targetFolder: $(Build.SourcesDirectory)/.deps/assets/
        flattenFolders: true
    - task: CopyFiles@2
      displayName: Copy Linux SharedFx artifacts to .deps/assets
      inputs:
        sourceFolder: $(Build.StagingDirectory)/downloaded_artifacts/artifacts-Linux-SharedFx/runtime/
        contents: '**'
        targetFolder: $(Build.SourcesDirectory)/.deps/assets/
    - task: CopyFiles@2
      displayName: Copy Linux Musl SharedFx artifacts to .deps/assets
      inputs:
        sourceFolder: $(Build.StagingDirectory)/downloaded_artifacts/artifacts-Linux-Musl-SharedFx/runtime/
        contents: '**'
        targetFolder: $(Build.SourcesDirectory)/.deps/assets/
    - task: CopyFiles@2
      displayName: Copy MacOs SharedFx artifacts to .deps/assets
      inputs:
        sourceFolder: $(Build.StagingDirectory)/downloaded_artifacts/artifacts-MacOs-SharedFx/runtime/
        contents: '**'
        targetFolder: $(Build.SourcesDirectory)/.deps/assets/
    - task: CopyFiles@2
      displayName: Copy Windows SharedFx artifacts to .deps/assets
      inputs:
        sourceFolder: $(Build.StagingDirectory)/downloaded_artifacts/artifacts-Windows-SharedFx/Signed/
        contents: |
          SharedFx/**
          OobArchives/**
        targetFolder: $(Build.SourcesDirectory)/.deps/assets/
        flattenFolders: true
    - task: CopyFiles@2
      displayName: Copy Package Archive artifacts to .deps/assets
      inputs:
        sourceFolder: $(Build.StagingDirectory)/downloaded_artifacts/artifacts-Package-Archive/lzma/
        contents: '**'
        targetFolder: $(Build.SourcesDirectory)/.deps/assets/
    - task: CopyFiles@2
      displayName: Copy SharedFx Installer artifacts to .deps/assets
      inputs:
        sourceFolder: $(Build.StagingDirectory)/downloaded_artifacts/artifacts-SharedFx-Installers/installers/
        contents: '**'
        targetFolder: $(Build.SourcesDirectory)/.deps/assets/
    - task: CopyFiles@2
      displayName: Copy Windows Installer artifacts to .deps/assets
      inputs:
        sourceFolder: $(Build.StagingDirectory)/downloaded_artifacts/artifacts-Windows-Installers/bin/Release/installers/
        contents: |
          en-US/*.msi
          **/*.exe
          **/*.wixlib
          **/*.nupkg
        targetFolder: $(Build.SourcesDirectory)/.deps/assets/
        flattenFolders: true
    - task: CopyFiles@2
      displayName: Copy Linux SharedFx artifacts to .deps/packages
      inputs:
        sourceFolder: $(Build.StagingDirectory)/downloaded_artifacts/artifacts-Linux-SharedFx/symbols/
        contents: '**'
        targetFolder: $(Build.SourcesDirectory)/.deps/packages/
    - task: CopyFiles@2
      displayName: Copy Linux Musl SharedFx artifacts to .deps/packages
      inputs:
        sourceFolder: $(Build.StagingDirectory)/downloaded_artifacts/artifacts-Linux-Musl-SharedFx/symbols/
        contents: '**'
        targetFolder: $(Build.SourcesDirectory)/.deps/packages/
    - task: CopyFiles@2
      displayName: Copy MacOs SharedFx artifacts to .deps/packages
      inputs:
        sourceFolder: $(Build.StagingDirectory)/downloaded_artifacts/artifacts-MacOs-SharedFx/symbols/
        contents: '**'
        targetFolder: $(Build.SourcesDirectory)/.deps/packages/
    - task: CopyFiles@2
      displayName: Copy Windows SharedFx artifacts to .deps/packages
      inputs:
        sourceFolder: $(Build.StagingDirectory)/downloaded_artifacts/artifacts-Windows-SharedFx/Signed/Packages/
        contents: '**'
        targetFolder: $(Build.SourcesDirectory)/.deps/packages/
    - task: DeleteFiles@1
      displayName: Delete korebuild.json
      inputs:
        contents: korebuild.json
    - script: .\build.cmd
              -ci
              $(BuildNumberArg)
              /t:Publish
              /p:BuildBranch=$(Build.SourceBranchName)
              /bl:artifacts/logs/Publish.binlog
      env:
        PB_PACKAGEVERSIONPROPSURL: $(PB_PackageVersionPropsUrl)
        PB_ASSETROOTURL: $(PB_AssetRootUrl)
        PB_RESTORESOURCE: $(PB_RestoreSource)
        PB_PUBLISHBLOBFEEDKEY: $(PB_PublishBlobFeedKey)
      displayName: Publish
    - powershell: eng\scripts\KillProcesses.ps1
      displayName: Kill processes
      condition: always()
    - task: PublishBuildArtifacts@1
      displayName: Upload logs
      condition: eq(variables['system.pullrequest.isfork'], false)
      continueOnError: true
      inputs:
        pathtoPublish: artifacts/logs
        artifactName: artifacts-Publish
        artifactType: Container
        parallel: true
