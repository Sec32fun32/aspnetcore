<Project Sdk="Microsoft.DotNet.Helix.Sdk" DefaultTargets="Test" TreatAsLocalProperty="ProjectToBuild">
  <PropertyGroup>
    <!--
      When invoking helix.proj for the whole repo with build.cmd, ProjectToBuild will be set to the path to this project.
      This must be reset in order for Build.props to evaluate a list of projects to be tested on Helix.
    -->
    <ProjectToBuild Condition="'$(ProjectToBuild)' == '$(MSBuildProjectFullPath)'" />

    <!--
      Do not load NuGet.targets since this project doesn't reference anything from NuGet. Not loading
      NuGet.targets causes Arcade (when we're invoked from there) to use our Restore target. It also means
      NuGet.targets doesn't override our Restore target (in RunHelix.ps1 cases).
    -->
    <IsRestoreTargetsFileLoaded>true</IsRestoreTargetsFileLoaded>
  </PropertyGroup>

  <Import Project="..\targets\Helix.Common.props" />
  <Import Project="..\Build.props" />
  <Import Project="..\Versions.props" />

  <ItemGroup>
    <!--
      Ensure shared framework and targeting pack packages are available for correlation payload but not when
      requirement is suppressed (the default RunHelix.ps1 case).
    -->
    <ProjectToBuild Include="$(RepoRoot)\src\Framework\App.Ref\src\Microsoft.AspNetCore.App.Ref.csproj"
        Condition=" '$(DoNotRequireSharedFxHelix)' != 'true' " />

    <ProjectReference Include="@(ProjectToBuild->Distinct())"
        BuildInParallel="%(ProjectToBuild.BuildInParallel)"
        Condition=" @(ProjectToBuild->Count()) != 0 "
        Private="false"
        ReferenceOutputAssembly="false"
        SkipGetTargetFrameworkProperties="true" />
  </ItemGroup>

  <!-- Microsoft.DotNet.Helix.Sdk.MultiQueue.targets splits $(HelixTargetQueues) into @(HelixTargetQueue) items. -->
  <ItemGroup Condition=" '$(HelixTargetQueues)' == '' ">
    <HelixTargetQueue Condition="'$(_UseHelixOpenQueues)' == 'true'" Include="@(HelixAvailableTargetQueue)" />
    <HelixTargetQueue Condition="'$(_UseHelixOpenQueues)' != 'true'" Include="@(HelixAvailableTargetQueue->'%(Identity)'->Replace('.Open',''))" />
  </ItemGroup>

  <PropertyGroup>
    <HelixBuild>private-$(USERNAME)</HelixBuild>
    <HelixBuild Condition=" '$(USERNAME)' == '' ">private-$(USER)</HelixBuild>
    <IsExternal>true</IsExternal>
    <MaxRetryCount Condition="'$(MaxRetryCount)' == ''">2</MaxRetryCount>
    <HelixAccessToken Condition="'$(_UseHelixOpenQueues)' != 'true'">$(HelixApiAccessToken)</HelixAccessToken>
    <IncludeDotNetCli>true</IncludeDotNetCli>
    <DotNetCliPackageType>sdk</DotNetCliPackageType>
    <DotNetCliVersion>$(NETCoreSdkVersion)</DotNetCliVersion>
    <DotNetCliChannel>Current</DotNetCliChannel>

    <!-- Similar to ProjectLayout.props in the Arcade SDK. The Helix SDK contains nothing similar. -->
    <OutputPath Condition=" '$(OutputPath)' == '' ">$(RepoRoot)artifacts\bin\$(MSBuildProjectName)\</OutputPath>
  </PropertyGroup>

  <!-- Specify the runtime we need which will be included as a correlation payload -->
  <ItemGroup>
    <!--
      Use the BrowserDebugHost transport package as a sentinel for the non-shipping version of the NETCoreApp shared framework.
    -->
    <AdditionalDotNetPackage Include="$(MicrosoftNETCoreBrowserDebugHostTransportVersion)">
      <PackageType>runtime</PackageType>
    </AdditionalDotNetPackage>
  </ItemGroup>

  <Choose>
    <When Condition=" '$(ContinuousIntegrationBuild)' == 'true' ">
      <PropertyGroup>
        <!-- Creator is not valid for internal queues -->
        <Creator Condition="'$(_UseHelixOpenQueues)' == 'true'">aspnetcore</Creator>

        <HelixType>ci</HelixType>
        <HelixBuild>$(BUILD_BUILDNUMBER).$(SYSTEM_JOBATTEMPT)</HelixBuild>

        <!-- Pack everything that can pack up front in CI builds. -->
        <ProjectReferenceBuildTargets>Build;Pack</ProjectReferenceBuildTargets>
      </PropertyGroup>
    </When>
    <Otherwise>
      <PropertyGroup>
        <!-- Creator is not valid for internal queues -->
        <Creator Condition="'$(_UseHelixOpenQueues)' == 'true'">$(USERNAME)</Creator>
        <Creator Condition="'$(USERNAME)' == '' AND '$(_UseHelixOpenQueues)' == 'true'">$(USER)</Creator>

        <HelixType>dev</HelixType>
        <HelixBuild>$([System.DateTime]::Now.ToString('yyyyMMddHHmm'))</HelixBuild>

        <!--
          Do not pack in local (RunHelix.ps1) builds. Packages can overwhelm home networks. Will use any packages
          found on disk. (May make sense to delete artifacts/packages/ before doing local builds.) Since App.Ref
          and App.Runtime always pack on build, those two packages will be used unless DoNotRequireSharedFxHelix
          is true.
        -->
        <ProjectReferenceBuildTargets>Build</ProjectReferenceBuildTargets>
      </PropertyGroup>
    </Otherwise>
  </Choose>

  <!-- Items with the type "HelixProperties" will become arbitrary JSON associated with the job -->
  <!-- NOTE: These are global to the whole Job, so don't include project-specific content here. -->
  <ItemGroup>
    <HelixProperties Include="buildNumber" Value="$(BUILD_BUILDNUMBER)" Condition="'$(BUILD_BUILDNUMBER)' != ''" />
    <HelixProperties Include="buildId" Value="$(BUILD_BUILDID)" Condition="'$(BUILD_BUILDID)' != ''" />
    <HelixProperties Include="azdoProject" Value="$(SYSTEM_TEAMPROJECT)" Condition="'$(SYSTEM_TEAMPROJECT)' != ''" />
    <HelixProperties Include="buildDefinition" Value="$(BUILD_DEFINITIONNAME)" Condition="'$(BUILD_DEFINITIONNAME)' != ''" />
    <HelixProperties Include="commitSha" Value="$(BUILD_SOURCEVERSION)" Condition="'$(BUILD_SOURCEVERSION)' != ''" />
    <HelixProperties Include="branch" Value="$(BUILD_SOURCEBRANCH)" Condition="'$(BUILD_SOURCEBRANCH)' != ''" />
    <HelixProperties Condition="'$(RunQuarantinedTests)' == 'true'" Include="runType" Value="quarantined" />
    <HelixProperties Condition="'$(RunQuarantinedTests)' != 'true'" Include="runType" Value="unquarantined" />
  </ItemGroup>

  <!--
    Use one of the NuGet.targets hooks to restore projects that do not use NuGet. Ignore .javaproj files because
    they do not have a useful `Restore` target.
  -->
  <Target Name="RestoreNpmProjects" BeforeTargets="CollectPackageDownloads">
    <ItemGroup>
      <_ProjectsToRestore Include="@(ProjectReference)" Condition=" '%(Extension)' == '.npmproj' " />
    </ItemGroup>
    <MSBuild Projects="@(_ProjectsToRestore)" BuildInParallel="false" Targets="Restore" />
  </Target>

  <Target Name="IncludeAspNetRuntime" Condition=" '$(DoNotRequireSharedFxHelix)' != 'true' ">
    <MSBuild Projects="$(RepoRoot)src\Framework\App.Runtime\src\Microsoft.AspNetCore.App.Runtime.csproj"
        Properties="DisableYarnCheck=true;ExcludeFromBuild=false"
        Targets="_GetPackageVersionInfo">
      <Output TaskParameter="TargetOutputs" ItemName="_ResolvedProductVersionInfo" />
    </MSBuild>

    <PropertyGroup>
      <SharedFxVersion>@(_ResolvedProductVersionInfo->'%(PackageVersion)')</SharedFxVersion>
    </PropertyGroup>

    <!-- Use package because .dotnet/ folder doesn't contain RuntimeList.xml file and SharedFxTests checks that. -->
    <Unzip
       SourceFiles="$(RepoRoot)artifacts\packages\$(Configuration)\Shipping\Microsoft.AspNetCore.App.Runtime.$(TargetRuntimeIdentifier).$(SharedFxVersion).nupkg"
       DestinationFolder="$(OutputPath)\SharedFx.Unzip" />
    <ItemGroup>
      <_appRuntimeFiles Include="$(OutputPath)\SharedFx.Unzip\**\*.txt" />
      <_appRuntimeFiles Include="$(OutputPath)\SharedFx.Unzip\**\*.json" />
      <_appRuntimeFiles Include="$(OutputPath)\SharedFx.Unzip\**\*.dll" />
      <_appRuntimeFiles Include="$(OutputPath)\SharedFx.Unzip\**\RuntimeList.xml" />
    </ItemGroup>
    <Copy SourceFiles="@(_appRuntimeFiles)"
        DestinationFolder="$(OutputPath)\SharedFx.Layout\shared\Microsoft.AspNetCore.App\$(SharedFxVersion)" />
    <Copy SourceFiles="$(OutputPath)\SharedFx.Unzip\Microsoft.AspNetCore.App.versions.txt"
        DestinationFiles="$(OutputPath)\SharedFx.Layout\shared\Microsoft.AspNetCore.App\$(SharedFxVersion)\.version" />

    <Unzip SourceFiles="$(RepoRoot)artifacts\packages\$(Configuration)\Shipping\Microsoft.AspNetCore.App.Ref.$(SharedFxVersion).nupkg"
      DestinationFolder="$(OutputPath)\SharedFx.Layout\packs\Microsoft.AspNetCore.App.Ref\$(SharedFxVersion)" />
    <ZipDirectory SourceDirectory="$(OutputPath)\SharedFx.Layout"
      DestinationFile="$(OutputPath)\SharedFx.Layout.zip" Overwrite="true" />

    <ItemGroup>
      <HelixCorrelationPayload Include="$(OutputPath)\SharedFx.Layout.zip" Destination="$(DotNetCliDestination)" />
    </ItemGroup>
  </Target>

  <Target Name="_Gather">
    <MSBuild Projects="@(ProjectToBuild)"
        BuildInParallel="%(ProjectToBuild.BuildInParallel)"
        Targets="CreateHelixPayload"
        SkipNonexistentTargets="true">
      <Output TaskParameter="TargetOutputs" ItemName="HelixWorkItem" />
    </MSBuild>
  </Target>

  <Target Name="Gather"
      BeforeTargets="Build"
      DependsOnTargets="_Gather;IncludeAspNetRuntime" />
</Project>
